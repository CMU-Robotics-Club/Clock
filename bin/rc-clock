#!/usr/bin/env python3

from clock import Clock
from rc import APIClient
import argparse
import logging
import time

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('-public_key', help="API Public Key(defaults to OS environment variable `RC_PROJECT_PUBLIC_KEY`")
  parser.add_argument('-private_key', help="API Private Key(defaults to OS environment variable `RC_PROJECT_PRIVATE_KEY`")
  parser.add_argument('-v', '--verbose', help="Print logging info to stdout", action='store_true')
  parser.add_argument('clock_device', help="Clock /dev/ Device")

  args = parser.parse_args()

  public_key = args.public_key
  private_key = args.private_key
  verbose = args.verbose
  clock_device = args.clock_device

  logger = logging.getLogger()

  if verbose:
    logger.setLevel(logging.DEBUG)

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.DEBUG)
    console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

  client = APIClient(public_key, private_key)

  clock = Clock(clock_device)

  logger.info("starting main loop")

  events = []

  while True:
    logger.debug("beginning of loop iteration")

    new_events = client.calendar()

    if new_events != events:
      logger.info("new events")

      for event in new_events:
        s = "{} - {}".format(event['name'], event['location'])
        clock.write(s)
        time.sleep(5)

      events = new_events
    else:
      logger.info("no new events")

    clock.write_time()

    # Sleep for 1 minute
    time.sleep(60)
